import pygame
import random
import search

'''The following are the available command keys for this pathfinding program.'''

# left mouse click -
#   The first click places the start node.
#   The second click places the goal node.
#   Clicks after these nodes are placed will create barriers of the type determined by whatever type has been
#   selected using the 'z' key toggle.

# ** Note that the program will not start until a start and end node have been selected.

# right mouse click - clears a node of any unique status (becomes an empty node).

# Key 'z' - toggle between visible and invisible barriers

# Key 'g' - this will generate a graph with barriers; the number of barriers corresponds to the set obstacle density
# of the program, which is by default 33.33%. Toggle the default obstacle density by changing the
# BARRIER_RANDOM_CONSTANT in the program's code (below). In the program, you can toggle the type of barrier to be
# generated by pressing the key 'z'. Pressing 'z' toggles between invisible barrier generation and visible barrier
# generation.

# Key 'm' - this will generate a graph with barriers like when pressing key 'g' in correspondence with the selected
# obstacle density, except in this case a mixture of invisible and visible barriers will be generated. When a node is
# selected to be a barrier during generation, there is a 50-50 chance of an invisible or visible barrier being
# generated.

# Key 'c' - clear the grid, meaning all nodes become empty nodes.

# Key 's' - clear the grid of all nodes that are paths, open, or closed. These node statuses are described below.

# Key 'b' - restore the graph to its state before the last search algorithm was initiated.

# Key '1' - initiate A* without travel.

# Key '2' - initiate A* with travel (compute shortest path and traverse to goal position).

# Key '3' - initiate LPA*.

# Key '4' - initiate D* Lite.


'''The following are descriptions of all node statuses. Corresponding colors are defined further down.'''

# Closed node - In the case of A*, a closed node is a node that has been visited due to its f-value being the smallest.
#   For LPA* and D* Lite, however, a closed node is a node that is locally consistent, where a node is locally
#   consistent when its rhs-value is equal to its g-value.

# Open node - In all algorithms, the open node is a node that is in the open set, which is a priority queue.

# Path node - A path node signifies that the node is part of the path to the goal node (may not be part of the shortest
# path, in the case of locating and moving to the goal).

# Invisible Barrier - A node which is not able to be traversed to, but the agent is not yet aware of this.

# Visible barrier - A node which is not able to be traversed to, and the agent is aware of this.

# Original start node - This node is simply the starting point for an algorithm which seeks to move the agent
#   from the start node to the goal node.

# Empty node - A node which has no unique status.

# Start node - The node at which the agent starts calculating the shortest path. This node changes when the algorithm
#   demands the agent to traverse from the start node to the end node.

# End (goal) node - The node that the agent is attempting to find a shortest path to, and perhaps traverse to.


'''Global variables.'''

# set WIDTH = 600, ROWS = 40 for what was used during testing
# for demonstration, rows = 20, width = 400
WIDTH = 600
ROWS = 40
WINDOW = pygame.display.set_mode((WIDTH, WIDTH))
pygame.display.set_caption("A*, LPA*, and D* Lite Pathfinder")


# determines how likely it is for a node to be generated as a barrier
# 2 means 1/2 chance, 3 means 1/3 chance...
# 1/3 chance per node means the obstacle density is (1/3 * 100) %
# the barrier random constant should be an integer
BARRIER_RANDOM_CONSTANT = 4

'''The following are the colors signifying each node status.'''

RED = (225, 0, 0) # signifies a closed node
GREEN = (0, 255, 0) # signifies an open node
BLUE = (0, 0, 255) # signifies an invisible barrier
YELLOW = (255, 255, 0) # signifies the original start node if the start node is not static
WHITE = (255, 255, 255) # signifies regular node (default color for a node)
BLACK = (0, 0, 0) # signifies a visible barrier
PURPLE = (128, 0, 128) # signifies a node which is part of the path taken to reach the goal
ORANGE = (255, 165, 0) # signifies the start node
GREY = (128, 128, 128) # for drawing the lines in the graph
TURQUOISE = (64, 224, 208) # signifies the goal node


'''A class for defining nodes in the graph. f-values, rhs-values, and g-values are stored separately
    in dictionaries.'''
class Node:
    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = WHITE
        self.neighbors = []
        self.width = width
        self.total_rows = total_rows

    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_visible_barrier(self):
        return self.color == BLACK

    def is_invisible_barrier(self):
        return self.color == BLUE

    def is_start(self):
        return self.color == ORANGE

    def is_original_start(self):
        return self.color == YELLOW

    def is_end(self):
        return self.color == TURQUOISE

    def is_path(self):
        return self.color == PURPLE

    def reset(self):
        self.color = WHITE

    def make_start(self):
        self.color = ORANGE

    def make_original_start(self):
        self.color = YELLOW

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_visible_barrier(self):
        self.color = BLACK

    def make_invisible_barrier(self):
        self.color = BLUE

    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        self.color = PURPLE

    def draw(self, window):
        pygame.draw.rect(window, self.color, (self.x, self.y, self.width, self.width))

    def update_neighbors(self, grid):
        self.neighbors = []
        if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_visible_barrier():  # DOWN
            self.neighbors.append(grid[self.row + 1][self.col])

        if self.row > 0 and not grid[self.row - 1][self.col].is_visible_barrier():  # UP
            self.neighbors.append(grid[self.row - 1][self.col])

        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_visible_barrier():  # RIGHT
            self.neighbors.append(grid[self.row][self.col + 1])

        if self.col > 0 and not grid[self.row][self.col - 1].is_visible_barrier():  # LEFT
            self.neighbors.append(grid[self.row][self.col - 1])

    def __lt__(self, other):
        return False


# this defines the grid as a list, which contains inner-lists containing Node instances
# each inner list contains one row's worth of nodes
def make_grid(rows, width):
    grid = []
    gap = width // rows  # equal to the width of a single tile in the graph
    for i in range(rows):
        grid.append([])
        for j in range(rows):
            node = Node(i, j, gap, rows)
            grid[i].append(node)

    return grid

# make a copy of the current grid state
def duplicate_grid(grid, rows, width):
    dup_grid = make_grid(rows, width)
    original_start = None
    original_end = None
    for row in grid:
        for node in row:
            x, y = node.get_pos()
            dup_node = dup_grid[x][y]
            dup_node.color = node.color
            if dup_node.is_start():
                original_start = dup_node
            elif dup_node.is_end():
                original_end = dup_node

    return dup_grid, original_start, original_end


# draw grid lines
def draw_grid(window, rows, width):
    gap = width // rows
    for i in range(rows):
        pygame.draw.line(window, GREY, (0, i * gap), (width, i * gap))  # window, color, start point, end point
        for j in range(rows):
            pygame.draw.line(window, GREY, (j * gap, 0), (j * gap, width))


def draw(window, grid, rows, width):
    window.fill(WHITE)
    for row in grid:
        for node in row:
            node.draw(window)

    draw_grid(window, rows, width)
    pygame.display.update()


def get_clicked_pos(pos, rows, width):
    gap = width // rows
    y, x = pos
    row = y // gap
    col = x // gap

    return row, col

# generate barriers that are solely visible
def generate_barriers(grid, visible_barriers):
    if visible_barriers:
        for row in grid:
            for node in row:
                if random.randint(1, BARRIER_RANDOM_CONSTANT) == 1:
                    node.make_visible_barrier()
    else:
        for row in grid:
            for node in row:
                if random.randint(1, BARRIER_RANDOM_CONSTANT) == 1:
                    node.make_invisible_barrier()

# generate a mix of visible and invisible barriers
def generate_barriers_mixed(grid):
    for row in grid:
        for node in row:
            if random.randint(1, BARRIER_RANDOM_CONSTANT) == 1:
                if random.randint(0, 1) == 1:
                    node.make_visible_barrier()
                else:
                    node.make_invisible_barrier()


# main method - controls reactions to all input
def start_visualizer(window, rows, width):
    grid = make_grid(rows, width)

    start = None
    end = None
    run = True
    visible_barriers = True
    invisible_barriers = []
    original_grid = grid
    original_start = None
    original_end = None

    while run:
        draw(window, grid, rows, width)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            pos = pygame.mouse.get_pos()
            row, col = get_clicked_pos(pos, rows, width)
            node = grid[row][col]

            if pygame.mouse.get_pressed()[0]:  # Left click
                if not start and not end:
                    start = node
                    start.make_start()
                elif not end and node is not start:
                    end = node
                    end.make_end()
                elif not start and node is not end:
                    start = node
                    start.make_start()
                elif node is not end and node is not start:
                    if visible_barriers:
                        node.make_visible_barrier()
                    else:
                        node.make_invisible_barrier()

            elif pygame.mouse.get_pressed()[2]:  # Right click
                node.reset()
                if node is start:
                    start = None
                elif node is end:
                    end = None

            if event.type == pygame.KEYDOWN:
                if start and end:
                    for row in grid:
                        for node in row:
                            node.update_neighbors(grid)
                    start.make_start()
                    end.make_end()

                    # do A* without traversal to goal
                    # includes adapting to updates in environment
                    if event.key == pygame.K_1:

                        original_grid, original_start, original_end = duplicate_grid(grid, rows, width)

                        invisible_barriers.clear()
                        for row in grid:
                            for node in row:
                                if node.is_invisible_barrier():
                                    invisible_barriers.append(node)

                        search.perform_a_star(lambda: draw(window, grid, rows, width), grid, start, end,
                                       invisible_barriers, False)

                    # do A* with traversal to goal
                    elif event.key == pygame.K_2:
                        original_grid, original_start, original_end = duplicate_grid(grid, rows, width)

                        invisible_barriers.clear()
                        for row in grid:
                            for node in row:
                                if node.is_invisible_barrier():
                                    invisible_barriers.append(node)

                        search.perform_a_star(lambda: draw(window, grid, rows, width), grid, start, end,
                                       invisible_barriers, True)


                    # do LPA*
                    elif event.key == pygame.K_3:
                        original_grid, original_start, original_end = duplicate_grid(grid, rows, width)

                        invisible_barriers.clear()
                        for row in grid:
                            for node in row:
                                if node.is_invisible_barrier():
                                    invisible_barriers.append(node)

                        search.perform_lpa_star(lambda: draw(window, grid, rows, width), grid, start, end, invisible_barriers)

                    # do D* Lite
                    elif event.key == pygame.K_4:
                        original_grid, original_start, original_end = duplicate_grid(grid, rows, width)

                        search.perform_d_star_lite(lambda: draw(window, grid, rows, width), grid, start, end)

                    # clear grid
                if event.key == pygame.K_c:
                    start = None
                    end = None
                    grid = make_grid(rows, width)

                    # "safe clear" grid - remove everything except barriers, start, and end
                if event.key == pygame.K_s:
                    for row in grid:
                        for node in row:
                            if node.is_open() or node.is_closed() or node.is_path():
                                node.reset()

                # toggle barrier type (visible or invisible)
                if event.key == pygame.K_z:
                    if visible_barriers:
                        visible_barriers = False
                    else:
                        visible_barriers = True

                # generate barriers
                if event.key == pygame.K_g:
                    start = None
                    end = None
                    grid = make_grid(rows, width)
                    generate_barriers(grid, visible_barriers)

                # generate a mix of invisible and visible barriers
                if event.key == pygame.K_m:
                    start = None
                    end = None
                    grid = make_grid(rows, width)
                    generate_barriers_mixed(grid)

                # restore grid to original version preceding latest algorithm visualization
                if event.key == pygame.K_b:
                    grid = original_grid
                    start = original_start
                    end = original_end

    pygame.quit()


start_visualizer(WINDOW, ROWS, WIDTH)
